클라우드
	- 인터넷 통신망을 통해 각종 컴퓨팅 자원을 자유롭게 사용할 수 있는 서비스

버전 관리 시스템 (VCS)
	-  파일 변화를 시간에 따라 버전별로 기억하고, 특정 시점의 버전을 다시 꺼낼 수 있는 시스템
	- ex) CVS, SVN, GIT

Git Bash (유닉스 쉘 시스템)
	- Windows환경에서도 리눅스 명령어를 사용할 수 있음
	- 버전관리를 위한 기능을 사용할 수 있음



         Git의 구조 및 순서
**********************************
1. working directory (작업영역)
	- 개인 PC의 작업 공간

2. staging area (준비영역)
	- 버전 관리의 대상이 되는 공간

3. local repository (로컬저장소)
	- 개인 PC의 저장소 

4. remote repository (원격저장소)
	- 외부 사용자와 공유하기 위한 저장소
**********************************



       (처음) Git Bash 프로그램으로 파일을 원격 저장소에 Push하는 방법 
**************************************************************************************
0. github.com에서 본인의 repository를 사이트 기본 값 그대로 생성하고, Git Bash 프로그램을 실행

1. Git에 올리고자 하는 폴더의 경로로 이동
	ex) cd c/api, cd d/folder
2. git init
	※ 현재 폴더를 로컬 저장소로 지정
3. git status
	※ 로컬 저장소의 현재 상태를 확인
Untracked Files (빨강 파일)
	- 추적 X (준비영역이나 로컬저장소에 한 번도 add되거나 commit되지 않음)
tracked File (초록 파일)
	- 추적 O (준비영역이나 로컬저장소에 최소한 한 번은 add나 commit됨)

4.   git add .  (작업 영역의 모든 파일을 준비영역에 추가)
또는 git add "파일명" (작업 영역의 "파일명"에 해당하는 파일만 준비영역에 추가)

4-1. git config core.autocrlf true
	※  OS별 문서의 개행 문자를 처리하는 방식을 맞춰주기 위해서 사용 
	- Unix는 한 줄의 끝이 LF(Line Feed)로 이루어짐.
	- Windows는 한 줄이 CR(Carrige Return)과 LF(Line Feed)로 이루어짐.

5. git commit -m "메시지"
	※ 로컬 저장소에 최종 저장

6. git remote add 별칭 URL
	※ 로컬 저장소와 원격 저장소를 연결
	- 별칭 예시: origin
	- URL 예시: https://github.com/EverythingOfC/api  <- 본인의 Git 저장소 주소

7. git remote -v
	- 별칭으로 등록된 원격 저장소를 확인

8.   git push 별칭 branch명 (Git은 기본적으로 master branch가 생성됨)
		※ branch명 앞에 +가 붙으면 에러를 무시하고 강제로 push
		- 로컬 branch를 같은 이름의 원격 branch로 push

또는 git push 별칭 branch1:branch2
	- 로컬 branch1을 다른 이름의 원격 branch2로 push


*********************************************************************************************



      가져오기 및 병합/취소
-----------------------------------
git clone (url) (저장할 폴더 명)
	- 원격 저장소에서 코드를 가져옴
	ex) git clone https://github.com/EverythingOfC/api practice

git pull 별칭 branch명
	- 원격 branch를 같은 이름의 로컬 branch로 가져옴.
↓
내려받을 원격 저장소의 파일과 로컬 저장소의 파일이 충돌할 경우 !!!
	에러 메시지: failed to push some refs to URL
	해결 방법: git pull 별칭 branch명 --allow-unrelated-histories

git fetch --all
	- 변경된 모든 정보를 불러옴 ( 다운로드 X )
git fetch
	- 정보 업데이트

git merge 다른branch명
	1. 현재 checkout된 branch에 다른 branch를 병합
	2. 병합 후, 현재 branch가 병합된 결과를 가리킴
git merge --abort
	- 현재 진행중인 병합을 모두 삭제하고 이전으로 되돌림
git reset --merge ORIG_HEAD
	- 바로 직전의 병합을 취소함
-----------------------------------



 	정보 확인
-----------------------------------
git log
	- 현재까지의 commit 내역들을 보여줌
git diff
	- 적용된 수정사항들을 보여줌
-----------------------------------



	해제 및 삭제
-----------------------------------
git remote rm 별칭
	- 기존의 원격 저장소 연결 해제
git rm 파일명
	- 로컬 저장소에서 해당 파일 삭제

git rm 파일명 --cached
	- 해당 파일을 원격 저장소에서 제거
git rm -r 폴더명 --cached
	- 해당 폴더를 원격 저장소에서 제거
git clean
	- 작업 영역에서 필요 없는 파일을 삭제한다.
------------------------------------



           branch 명령어
------------------------------------
git branch -a
	- 원격 저장소를 포함한 branch 목록 확인
git branch 
	- 지역 저장소의 branch 목록 확인
git branch branch명
	- branch생성

git checkout branch명
	- 해당 branch로 이동
git checkout -b branch명
	- 현재 commit에서 branch 생성하고 이동
git checkout 커밋 아이디 -b branch명
	- 해당 커밋으로 이동 후 branch 생성

git branch -d (branch명)
	- 병합된 branch 삭제
git branch -D (branch명)
	- 병합되지 않은 branch삭제
git push 별칭 --delete branch명
	- 원격 저장소에서도 branch 삭제

※ branch명 변경
git branch -m 기존이름 바꿀이름
git fetch origin
git branch -u origin/master master
git remote set-head origin -a
------------------------------------

